###############################################################################
##
##Licensed Materials - Property of IBM
##
##(C) Copyright IBM Corp. 2022. All Rights Reserved.
##
##US Government Users Restricted Rights - Use, duplication or
##disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
##
###############################################################################
apiVersion: icp4a.ibm.com/v1
kind: ICP4ACluster
metadata:
  name: icp4adeploy
  labels:
    app.kubernetes.io/instance: ibm-dba
    app.kubernetes.io/managed-by: ibm-dba
    app.kubernetes.io/name: ibm-dba
    release: 23.0.1
spec:
  ## CP4A application version
  appVersion: 23.0.1
  ## MUST exist, used to accept ibm license, valid value only can be "accept"
  ibm_license: accept
  #####################################################################################################################
  ##  This template CR file reflects the ICP4A plaftorm foundation components shared by most of othe ICP4A capabilities,
  ##  as well as shared configurations for settings and services applicable to the ICP4A installation environment such
  ##  as LDAP, data sources, images information, storage classes, and other parameters you can find in the
  ##  shared_configuration section below.
  ##
  ##  The label, or "pattern name", for these foundation components is "foundation". You see this label set in the
  ##  sc_deployment_patterns parameter in the shared_configuration section of this file.
  ##
  ##  The ICP4A operator will automatically install the required foundation components, based on the description below, when
  ##  it detects the "foundation" pattern name amongst the sc_deployment_patters CR parameter of the CR being applied.
  ##
  ##  The foundation components that are automatically installed, by default, by the ICP4A operator are:
  ##    - Business Automation Navigator (BAN)
  ##    - Resource Registry (RR)
  ##
  ##  These other foundation components are installed based on their need, but their related minimal configuration
  ##  is included in this CR template.  Those additional platform components are:
  ##
  ##    - Business Automation Studio (BAS)
  ##    - User Management Services (UMS)
  ##    - Business Automation Insights (BAI)
  ##
  ##  Note that from the above foundation components, only BAI (with label "bai") will need to be explicitly specified
  ##  in the sc_optional_components parameter (in the shared_configuration) to inform the operator to install it, as
  ##  this installation of BAI reflects a user choice since BAI is not a pre-requisite component for any ICP4A capability.
  ##
  ##  This template CR contains the minimal configuration required for foundation components, since the ICP4A operator
  ##  will take care of defaults for a typicall configuration.
  ##
  ##  For BAN, RR, UMS and BAI you will not find dedicated configuration sections in this template since
  ##  default configurations are being used by the operator.
  ##
  ##  For BAB, UMS and BAI, you will only find  configuration parameters in the share_configuration section that need
  ##  to be configured.
  ##
  ##  For BAS, you will find a minimal bastudio_configuration section is in the CR, which will need to be present
  ##  and configured by you should if you are planning to install any of the following ICP4A capabilities and features:
  ##     - Automation Document Processing (ADP)
  ##     - Automation Digital Worker (digitalworker)
  ##     - the Applications Designer (app_designer) feature with  Business Automation Application (application)
  ##     - the Decision Designer feature (ads_designer) with Automation Decision Services (decisions_ads)
  ##
  ##  Note: In case non of these is to be installed, the bastudio_configuration should be commented out or deleted
  ##  from the final CR that will be applied.
  ##
  ##  How to use this template:
  ##
  ##  Make a copy of this CR foundation template as your starting point ICP4A CR yaml you are manually assembling.
  ##  Then paste into that CR the information and configuration from the respective
  ##  ibm_cp4a_cr_enterprise_<capability patter name>.yaml CR template files available in the same location.
  ##
  ######################################################################################################################
  shared_configuration:
    ## Use this parameter to specify the license for the CP4A deployment and
    ## the possible values are: non-production and production and if not set, the license will
    ## be defaulted to production.  This value could be different from the other licenses in the CR.
    sc_deployment_license: "<Required>"
    ## The deployment context, which has a default value of "CP4A".  Unless you are instructed to change this value or 
    ## know the reason to change this value, please leave the default value.
    sc_deployment_context: "CP4A"
    ## All CP4A components must use/share the same docker image repository.  For example, if IBM Entitled Registry is used, then
    ## it should be "cp.icr.io".  Otherwise, it will be a local docker registry.
    sc_image_repository: cp.icr.io
    ## All CP4A components must use/share the root_ca_secret in order for integration
    root_ca_secret: icp4a-root-ca
    ## This is the deployment hostname suffix, this is optional and the default hostname suffix will be used as {meta.namespace}.router-canonicalhostname
    # sc_deployment_hostname_suffix: "{{ meta.namespace }}.<Required>" 

    ## CP4A patterns or capabilities to be deployed.  This CR represents the "workflow-process-service" pattern, which includes the following
    ## mandatory components: bas(Business Automation Studio) and optional components: bai
    sc_deployment_patterns: "workflow-process-service"
    ## The optional components to be installed if listed here.  This is normally populated by the User script based on input from the user.
    ## The optional components are: bai,pfs. Please do not delete wfps_authoring, because it determines that this is an Authoring environment.
    ## pfs will bring advanced full text search function to workplace. And the external workplace can be enabled only when pfs is enabled.       
    sc_optional_components: "wfps_authoring"
    ## The deployment type as selected by the user.  Possible values are: Starter and Production.
    sc_deployment_type: "Production"
    ## The platform to be deployed specified by the user.  Possible values are: OCP and other.  This is normally populated by the User script
    ## based on input from the user.
    sc_deployment_platform: "OCP"
    ## Optional: You can specify a profile size for CloudPak - valid values are small,medium,large - default is small.
    sc_deployment_profile_size: "small"
    ## This is the deployment hostname suffix, this is optional and the default hostname suffix will be used as {meta.namespace}.router-canonicalhostname
    # sc_deployment_hostname_suffix: "{{ meta.namespace }}.<Required>" 

    ## For ROKS, this is used to enable the creation of ingresses. The default value is "false", which routes will be created.
    sc_ingress_enable: false
    ## For ROKS Ingress, provide TLS secret name for Ingress controller. If you are not using ROKS, comment out this line.
    # sc_ingress_tls_secret_name: <Required>
    ## If the root certificate authority (CA) key of the external service is not signed by the operator root CA key, provide the TLS certificate of
    ## the external service to the component's truststore.
    trusted_certificate_list: []
    ## On OCP 3.x and 4.x, the User script will populate these three (3) parameters based on your input for "production" deployment.
    ## If you manually deploying without using the User script, then you would provide the different storage classes for the slow, medium
    ## and fast storage parameters below.  If you only have 1 storage class defined, then you can use that 1 storage class for all 3 parameters.
    ## sc_block_storage_classname is for Zen, Zen requires/recommends block storage (RWO) for metastoreDB
    storage_configuration:
      sc_slow_file_storage_classname: "ocs-storagecluster-cephfs"
      sc_medium_file_storage_classname: "ocs-storagecluster-cephfs"
      sc_fast_file_storage_classname: "ocs-storagecluster-cephfs"
      sc_block_storage_classname: "ocs-storagecluster-ceph-rbd"
    # sc_common_service:
    #   ## common service operator namespace for CS4.0
    #   operator_namespace: ""
    #   ## common service service namespace for CS4.0
    #   services_namespace: ""
    ## IAM Settings
    sc_iam:
      ## Provide non default admin user for IAM in case you do not want to use cpadmin
      default_admin_username: ""
    ## Shared encryption key secret name that is used for Workflow or Workstream Services and Process Federation Server integration.
    ## This secret is also used by Workflow and BAStudio to store AES encryption key.
    encryption_key_secret: ibm-iaws-shared-key-secret
    image_pull_secrets:
    - ibm-entitlement-key
    sc_drivers_url:
  ## The beginning section of LDAP configuration for CP4A
  ## LDAP configuration is not required. But if you want to login with LDAP user. Then you can
  ## 1. Uncomment following configurations and apply this file to make operator configure the LDAP settings for you. Or
  ## 2. Do post actions with https://www.ibm.com/docs/en/cloud-paks/cp-biz-automation/22.0.1?topic=tasks-business-automation-studio to add the LDAP connection manually after install
  ldap_configuration:
    ## The possible values are: "IBM Security Directory Server" or "Microsoft Active Directory"
    lc_selected_ldap_type: "IBM Security Directory Server"
    ## The name of the LDAP server to connect
    lc_ldap_server: "worker1.cloudpak.szesto.io"
    ## The port of the LDAP server to connect.  Some possible values are: 389, 636, etc.
    lc_ldap_port: "31389"
    ## The LDAP bind secret for LDAP authentication.  The secret is expected to have ldapUsername and ldapPassword keys.  Refer to Knowledge Center for more info.
    lc_bind_secret: "ldap-bind-secret"
    ## The LDAP base DN.  For example, "dc=example,dc=com", "dc=abc,dc=com", etc
    lc_ldap_base_dn: "dc=example,dc=org"
    ## Enable SSL/TLS for LDAP communication. Refer to Knowledge Center for more info.
    lc_ldap_ssl_enabled: false
    ## The name of the secret that contains the LDAP SSL/TLS certificate.
    lc_ldap_ssl_secret_name: "ibm-cp4ba-ldap-ssl-secret"
    ## The LDAP user name attribute. Semicolon-separated list that must include the first RDN user distinguished names. One possible value is "*:uid" for TDS and "user:sAMAccountName" for AD. Refer to Knowledge Center for more info.
    lc_ldap_user_name_attribute: "*:uid"
    ## The LDAP user display name attribute. One possible value is "cn" for TDS and "sAMAccountName" for AD. Refer to Knowledge Center for more info.
    lc_ldap_user_display_name_attr: "cn"
    ## The LDAP group base DN.  For example, "dc=example,dc=com", "dc=abc,dc=com", etc
    lc_ldap_group_base_dn: "ou=users,cn=example,cn=org"
    ## The LDAP group name attribute.  One possible value is "*:cn" for TDS and "*:cn" for AD. Refer to Knowledge Center for more info.
    lc_ldap_group_name_attribute: "*:cn"
    ## The LDAP group display name attribute.  One possible value for both TDS and AD is "cn". Refer to Knowledge Center for more info.
    lc_ldap_group_display_name_attr: "cn"
    ## The LDAP group membership search filter string.  One possible value is "(|(&(objectclass=groupofnames)(member={0}))(&(objectclass=groupofuniquenames)(uniquemember={0})))" for TDS
    ## and "(&(cn=%v)(objectcategory=group))" for AD.
    lc_ldap_group_membership_search_filter: "(|(&(objectclass=groupofnames)(member={0}))(&(objectclass=groupofuniquenames)(uniquemember={0})))"
    ## The LDAP group membership ID map.  One possible value is "groupofnames:member" for TDS and "memberOf:member" for AD.
    lc_ldap_group_member_id_map: "groupofnames:member"
    ## The User script will uncomment the section needed based on user's input from User script.  If you are deploying without the User script,
    ## uncomment the necessary section (depending if you are using Active Directory (ad) or Tivoli Directory Service (tds)) accordingly.
    # ad:
    #   lc_ad_gc_host: "<Required>"
    #   lc_ad_gc_port: "<Required>"
    #   lc_user_filter: "(&(sAMAccountName=%v)(objectcategory=user))"
    #   lc_group_filter: "(&(cn=%v)(objectcategory=group))"
    # tds:
    #   lc_user_filter: "(&(cn=%v)(objectclass=person))"
    #   lc_group_filter: "(&(cn=%v)(|(objectclass=groupofnames)(objectclass=groupofuniquenames)(objectclass=groupofurls)))"

    ## The User script will uncomment the section needed based on user's input from User script.  If you are deploying without the User script,
    ## uncomment the necessary section (depending if you are using Active Directory (ad) or Tivoli Directory Service (tds)) accordingly.
    # ad:
    #   lc_ad_gc_host: "<Required>"
    #   lc_ad_gc_port: "<Required>"
    #   lc_user_filter: "(&(sAMAccountName=%v)(objectcategory=user))"
    #   lc_group_filter: "(&(cn=%v)(objectcategory=group))"
    tds:
      lc_user_filter: "(&(cn=%v)(objectclass=inetOrgPerson))"
      lc_group_filter: "(&(cn=%v)(|(objectclass=groupofnames)(objectclass=groupofuniquenames)(objectclass=groupofurls)))"
  #############################################################################
  ## This section contains the BAStudio component configurations              #
  #############################################################################
  bastudio_configuration:
    # Designate an existing LDAP user for the BAStudio and WfPS authoring repostiory admin user.
    # If not provided. Then the default IAM admin user will be used as the default admin user ID.
    # You can get that from secret ibm-iam-bindinfo-platform-auth-idp-credentials
    admin_user: "user01"
